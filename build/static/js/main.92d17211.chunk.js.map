{"version":3,"sources":["utils/colors.tsx","components/NavBar.tsx","components/App.tsx","serviceWorker.ts","index.tsx","components/ThemeContext.tsx"],"names":["colors","spin","keyframes","_templateObject","NavBar","Object","core_browser_esm","css","_templateObject2","es","to","_templateObject3","role","aria-label","Details","lazy","Promise","all","__webpack_require__","e","then","bind","SearchParams","Boolean","window","location","hostname","match","render","react_default","a","createElement","_useState","useState","_useState2","slicedToArray","color","setColor","ThemeContext","Provider","value","NavBar_NavBar","StrictMode","react","fallback","path","id","document","getElementById","navigator","serviceWorker","ready","registration","unregister","d","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","createContext","_"],"mappings":"6PAAaA,EAEA,gkBCGb,IAAMC,EAAOC,YAAHC,KAOGC,EAAmB,WAC9B,OACEC,OAAAC,EAAA,EAAAD,CAAA,UACEE,IAAKA,YAAFC,IACmBR,IAItBK,OAAAC,EAAA,EAAAD,CAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,cACAL,OAAAC,EAAA,EAAAD,CAAA,QACEE,IAAKA,YAAFI,IAIiBV,EAGFA,GAElBW,KAAK,MACLC,aAAW,QAXb,kBCbAC,EAAUC,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,cACrBC,EAAeP,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,cCGZE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCVnCC,iBAAOC,EAAAC,EAAAC,cFIsB,WAAM,IAAAC,EACPC,mBAAiB,YADVC,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAA2B,EAAA,GAC1BI,EAD0BF,EAAA,GACnBG,EADmBH,EAAA,GAGjC,OACEL,EAAAC,EAAAC,cAACO,EAAA,EAAaC,SAAd,CAAuBC,MAAO,CAACJ,EAAOC,IACpCR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACU,EAAD,MACAZ,EAAAC,EAAAC,cAACF,EAAAC,EAAMY,WAAP,KACEb,EAAAC,EAAAC,cAACY,EAAA,SAAD,CAAUC,SAAUf,EAAAC,EAAAC,cAAA,2BAClBF,EAAAC,EAAAC,cAACtB,EAAA,EAAD,KACEoB,EAAAC,EAAAC,cAACT,EAAD,CAAcuB,KAAK,MACnBhB,EAAAC,EAAAC,cAACjB,EAAD,CAAS+B,KAAK,eAAeC,GAAG,WEfvC,MAASC,SAASC,eAAe,SDwHlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC,+CEjInBnC,EAAAoC,EAAAC,EAAA,sBAAAjB,IAAA,IAAAkB,EAAAtC,EAAA,GAGaoB,EAA+EmB,wBAAc,CACxG,QACA,SAACC","file":"static/js/main.92d17211.chunk.js","sourcesContent":["export const colors = {\r\n  primary: '#bf3334',\r\n  secondary: '#d9c148',\r\n  dark: '#122622',\r\n  light: '#81a69b',\r\n};\r\n","import React from 'react';\r\nimport { Link } from '@reach/router';\r\nimport { css, jsx, keyframes } from '@emotion/core';\r\nimport { colors } from '../utils/colors';\r\n\r\nconst spin = keyframes`\r\n  to {\r\n    transform: rotate(360deg)\r\n  }\r\n`;\r\n\r\n/** @jsx jsx */\r\nexport const NavBar: React.FC = () => {\r\n  return (\r\n    <header\r\n      css={css`\r\n        background-color: ${colors.secondary};\r\n        padding: 15px;\r\n      `}\r\n    >\r\n      <Link to='/'>Adopt me !</Link>\r\n      <span\r\n        css={css`\r\n          font-size: 4rem;\r\n          &:hover {\r\n            text-decoration: underline;\r\n            animation: 1s ${spin} linear infinite reverse;\r\n          }\r\n          display: inline-block;\r\n          animation: 5s ${spin} linear infinite;\r\n        `}\r\n        role='img'\r\n        aria-label='logo'\r\n      >\r\n        üê©\r\n      </span>\r\n    </header>\r\n  );\r\n};\r\n","import React, { useState, lazy, Suspense } from 'react';\nimport { Router } from '@reach/router';\nimport './App.css';\n// import { SearchParams } from './SearchParams';\n// import { Details } from './Details';\nimport { ThemeContext } from './ThemeContext';\nimport { NavBar } from './NavBar';\n\nconst Details = lazy(() => import('./Details'));\nconst SearchParams = lazy(() => import('./SearchParams'));\n\nexport const App: React.FC = () => {\n  const [color, setColor] = useState<string>('darkblue');\n\n  return (\n    <ThemeContext.Provider value={[color, setColor]}>\n      <div>\n        <NavBar />\n        <React.StrictMode>\n          <Suspense fallback={<span>Loading...</span>}>\n            <Router>\n              <SearchParams path='/' />\n              <Details path='/details/:id' id='' />\n            </Router>\n          </Suspense>\n        </React.StrictMode>\n      </div>\n    </ThemeContext.Provider>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n// import ReactDOM from 'react-dom';\nimport { render } from 'react-snapshot'\nimport './index.css';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { createContext, SetStateAction, Dispatch } from 'react';\r\n\r\n// export const ThemeContext: React.Context<(string | (() => string))[]> = createContext(['green', () => ''])\r\nexport const ThemeContext: React.Context<(string | (Dispatch<SetStateAction<string>>))[]> = createContext([\r\n  'green',\r\n  (_: SetStateAction<string>) => {},\r\n]);\r\n"],"sourceRoot":""}